services: #definisce i servizi da avviare, nel nostro caso server e client
  
  database:
    image: postgres:latest
    container_name: dieti-estates-db
    env_file:
      - backend/.env
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - dieti-estates-network
    restart: unless-stopped
  
  server: 
    build: #definisce come costruire l'immagine del server
      context: ./backend
      dockerfile: Dockerfile
    container_name: dieti-estates-server
    ports:
      - "8080:8080" # Mappa la porta 8080 del container alla porta 8080 della macchina host
    env_file:
      - backend/.env
    networks:
      - dieti-estates-network # Rete per la comunicazione tra container
    depends_on:
      - database
    restart: unless-stopped # Riavvia il server se si arresta in modo anomalo
    dns:
      - 8.8.8.8
      - 8.8.4.4

  client:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - GOOGLE_API_KEY=699354462746-9ale2lg8onjqvafu9aiopmd0fo82j3b4.apps.googleusercontent.com
        - GEOAPIFY_TOKEN=c0324c2c2afb488980eae981c7906a43
    container_name: dieti-estates-client
    environment:
      - SERVER_HOST=server
      - SERVER_PORT=8080
      - GOOGLE_API_KEY=699354462746-9ale2lg8onjqvafu9aiopmd0fo82j3b4.apps.googleusercontent.com
      - GEOAPIFY_TOKEN=c0324c2c2afb488980eae981c7906a43
      
    networks:
      - dieti-estates-network
    depends_on:
      - server
    ports:
      - "4200:80"
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 8.8.4.4

networks:
  dieti-estates-network:
    driver: bridge

volumes:
  db-data: {}